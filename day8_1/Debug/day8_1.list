
day8_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080006a8  080006a8  000016a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006c8  080006c8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080006c8  080006c8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006c8  080006c8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c8  080006c8  000016c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006cc  080006cc  000016cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006d0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000edf  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004dc  00000000  00000000  00002f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  000033f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bb  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fbd  00000000  00000000  000035c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000162a  00000000  00000000  0001c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b812  00000000  00000000  0001dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a93bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002d8  00000000  00000000  000a9400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a96d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000047  00000000  00000000  000a96f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000690 	.word	0x08000690

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000690 	.word	0x08000690

080001c8 <EEPROM_Init>:
 *      Author: chetan
 */
#include "eeprom.h"

void EEPROM_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 80001ce:	f000 f93b 	bl	8000448 <I2CInit>
	I2CStart();
 80001d2:	f000 f871 	bl	80002b8 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 80001d6:	20a0      	movs	r0, #160	@ 0xa0
 80001d8:	f000 f918 	bl	800040c <I2CIsDeviceReady>
 80001dc:	6078      	str	r0, [r7, #4]
	I2CStop();
 80001de:	f000 f889 	bl	80002f4 <I2CStop>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}

080001ea <EEPROM_Read>:
  for(int i=0;i<n;i++)
	   I2CSendData(byte[i]);
  I2CStop();
}

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 80001ea:	b590      	push	{r4, r7, lr}
 80001ec:	b085      	sub	sp, #20
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	4603      	mov	r3, r0
 80001f2:	6039      	str	r1, [r7, #0]
 80001f4:	80fb      	strh	r3, [r7, #6]
 80001f6:	4613      	mov	r3, r2
 80001f8:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	0a1b      	lsrs	r3, r3, #8
 80001fe:	b29b      	uxth	r3, r3
 8000200:	72fb      	strb	r3, [r7, #11]
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000206:	f000 f857 	bl	80002b8 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 800020a:	20a0      	movs	r0, #160	@ 0xa0
 800020c:	f000 f88a 	bl	8000324 <I2CSendSlaveAddress>
	I2CSendData(high);
 8000210:	7afb      	ldrb	r3, [r7, #11]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8a2 	bl	800035c <I2CSendData>
	I2CSendData(low);
 8000218:	7abb      	ldrb	r3, [r7, #10]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f89e 	bl	800035c <I2CSendData>
	I2CRepeatStart();
 8000220:	f000 f862 	bl	80002e8 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000224:	20a1      	movs	r0, #161	@ 0xa1
 8000226:	f000 f87d 	bl	8000324 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e009      	b.n	8000244 <EEPROM_Read+0x5a>
		   byte[i] = I2CRecvDataAck();
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	18d4      	adds	r4, r2, r3
 8000236:	f000 f8b1 	bl	800039c <I2CRecvDataAck>
 800023a:	4603      	mov	r3, r0
 800023c:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3301      	adds	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	797b      	ldrb	r3, [r7, #5]
 8000246:	3b01      	subs	r3, #1
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	429a      	cmp	r2, r3
 800024c:	dbf0      	blt.n	8000230 <EEPROM_Read+0x46>
		byte[i] = I2CRecvDataNAck();
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	18d4      	adds	r4, r2, r3
 8000254:	f000 f8be 	bl	80003d4 <I2CRecvDataNAck>
 8000258:	4603      	mov	r3, r0
 800025a:	7023      	strb	r3, [r4, #0]
		I2CStop();
 800025c:	f000 f84a 	bl	80002f4 <I2CStop>
}
 8000260:	bf00      	nop
 8000262:	3714      	adds	r7, #20
 8000264:	46bd      	mov	sp, r7
 8000266:	bd90      	pop	{r4, r7, pc}

08000268 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000270:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <DelayMs+0x44>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <DelayMs+0x48>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a0e      	ldr	r2, [pc, #56]	@ (80002b4 <DelayMs+0x4c>)
 800027c:	fba2 2303 	umull	r2, r3, r2, r3
 8000280:	099b      	lsrs	r3, r3, #6
 8000282:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	fb02 f303 	mul.w	r3, r2, r3
 800028c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800028e:	bf00      	nop
 8000290:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <DelayMs+0x44>)
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	1ad2      	subs	r2, r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	429a      	cmp	r2, r3
 800029c:	d3f8      	bcc.n	8000290 <DelayMs+0x28>
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e0001000 	.word	0xe0001000
 80002b0:	20000000 	.word	0x20000000
 80002b4:	10624dd3 	.word	0x10624dd3

080002b8 <I2CStart>:
 */
#include "i2c.h"


void I2CStart()
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
I2C1->CR1 |= I2C_CR1_START;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <I2CStart+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <I2CStart+0x2c>)
 80002c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c6:	6013      	str	r3, [r2, #0]
while(!(I2C1->SR1 & I2C_SR1_SB));
 80002c8:	bf00      	nop
 80002ca:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <I2CStart+0x2c>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <I2CStart+0x12>
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40005400 	.word	0x40005400

080002e8 <I2CRepeatStart>:


void I2CRepeatStart()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
 I2CStart();
 80002ec:	f7ff ffe4 	bl	80002b8 <I2CStart>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <I2CStop>:

void I2CStop()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
 I2C1->CR1 |= I2C_CR1_STOP;
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <I2CStop+0x2c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <I2CStop+0x2c>)
 80002fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000302:	6013      	str	r3, [r2, #0]
 while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000304:	bf00      	nop
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <I2CStop+0x2c>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <I2CStop+0x12>
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40005400 	.word	0x40005400

08000324 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  I2C1->DR = slaveaddr;
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <I2CSendSlaveAddress+0x34>)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	6113      	str	r3, [r2, #16]
  while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000334:	bf00      	nop
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <I2CSendSlaveAddress+0x34>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f9      	beq.n	8000336 <I2CSendSlaveAddress+0x12>
  (void)I2C1->SR1;
 8000342:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <I2CSendSlaveAddress+0x34>)
 8000344:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 8000346:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <I2CSendSlaveAddress+0x34>)
 8000348:	699b      	ldr	r3, [r3, #24]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40005400 	.word	0x40005400

0800035c <I2CSendData>:

void I2CSendData(uint8_t val)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000366:	bf00      	nop
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <I2CSendData+0x3c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000370:	2b00      	cmp	r3, #0
 8000372:	d0f9      	beq.n	8000368 <I2CSendData+0xc>
  I2C1->DR = val;
 8000374:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <I2CSendData+0x3c>)
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	6113      	str	r3, [r2, #16]
  while(!(I2C1->SR1 & I2C_SR1_BTF));
 800037a:	bf00      	nop
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <I2CSendData+0x3c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <I2CSendData+0x20>
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40005400 	.word	0x40005400

0800039c <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
  uint8_t val;
  I2C1->CR1 |= I2C_CR1_ACK;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <I2CRecvDataAck+0x34>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a0a      	ldr	r2, [pc, #40]	@ (80003d0 <I2CRecvDataAck+0x34>)
 80003a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003ac:	6013      	str	r3, [r2, #0]
  while(!(I2C1->SR1 & I2C_SR1_RXNE));
 80003ae:	bf00      	nop
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <I2CRecvDataAck+0x34>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f9      	beq.n	80003b0 <I2CRecvDataAck+0x14>
  val = (uint8_t)I2C1->DR;
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <I2CRecvDataAck+0x34>)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	71fb      	strb	r3, [r7, #7]
  return val;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40005400 	.word	0x40005400

080003d4 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <I2CRecvDataNAck+0x34>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <I2CRecvDataNAck+0x34>)
 80003e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003e4:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80003e6:	bf00      	nop
 80003e8:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <I2CRecvDataNAck+0x34>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0f9      	beq.n	80003e8 <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 80003f4:	4b04      	ldr	r3, [pc, #16]	@ (8000408 <I2CRecvDataNAck+0x34>)
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	71fb      	strb	r3, [r7, #7]
	return val;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40005400 	.word	0x40005400

0800040c <I2CIsDeviceReady>:


int I2CIsDeviceReady(uint8_t slaveaddr) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f023 0301 	bic.w	r3, r3, #1
 800041c:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800041e:	4a09      	ldr	r2, [pc, #36]	@ (8000444 <I2CIsDeviceReady+0x38>)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000424:	bf00      	nop
 8000426:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <I2CIsDeviceReady+0x38>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0f9      	beq.n	8000426 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 8000432:	4b04      	ldr	r3, [pc, #16]	@ (8000444 <I2CIsDeviceReady+0x38>)
 8000434:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000436:	2301      	movs	r3, #1
}
 8000438:	4618      	mov	r0, r3
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40005400 	.word	0x40005400

08000448 <I2CInit>:



void I2CInit()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800044c:	4b3a      	ldr	r3, [pc, #232]	@ (8000538 <I2CInit+0xf0>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a39      	ldr	r2, [pc, #228]	@ (8000538 <I2CInit+0xf0>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000458:	2032      	movs	r0, #50	@ 0x32
 800045a:	f7ff ff05 	bl	8000268 <DelayMs>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800045e:	4b36      	ldr	r3, [pc, #216]	@ (8000538 <I2CInit+0xf0>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000462:	4a35      	ldr	r2, [pc, #212]	@ (8000538 <I2CInit+0xf0>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	6313      	str	r3, [r2, #48]	@ 0x30
  GPIOB ->MODER &= ~(3U << I2C1_SCL*2);
 800046a:	4b34      	ldr	r3, [pc, #208]	@ (800053c <I2CInit+0xf4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a33      	ldr	r2, [pc, #204]	@ (800053c <I2CInit+0xf4>)
 8000470:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000474:	6013      	str	r3, [r2, #0]
  GPIOB ->MODER |= (2 << I2C1_SCL*2);
 8000476:	4b31      	ldr	r3, [pc, #196]	@ (800053c <I2CInit+0xf4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a30      	ldr	r2, [pc, #192]	@ (800053c <I2CInit+0xf4>)
 800047c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000480:	6013      	str	r3, [r2, #0]
  GPIOB -> OTYPER |= (2 << I2C1_SCL*2);
 8000482:	4b2e      	ldr	r3, [pc, #184]	@ (800053c <I2CInit+0xf4>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	4a2d      	ldr	r2, [pc, #180]	@ (800053c <I2CInit+0xf4>)
 8000488:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048c:	6053      	str	r3, [r2, #4]
  GPIOB -> PUPDR &= ~(3U << I2C1_SCL*2);
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <I2CInit+0xf4>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a2a      	ldr	r2, [pc, #168]	@ (800053c <I2CInit+0xf4>)
 8000494:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000498:	60d3      	str	r3, [r2, #12]
  GPIOB ->MODER &= ~(3U << I2C1_SDA*2);
 800049a:	4b28      	ldr	r3, [pc, #160]	@ (800053c <I2CInit+0xf4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a27      	ldr	r2, [pc, #156]	@ (800053c <I2CInit+0xf4>)
 80004a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004a4:	6013      	str	r3, [r2, #0]
  GPIOB ->MODER |= (2 << I2C1_SDA*2);
 80004a6:	4b25      	ldr	r3, [pc, #148]	@ (800053c <I2CInit+0xf4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a24      	ldr	r2, [pc, #144]	@ (800053c <I2CInit+0xf4>)
 80004ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004b0:	6013      	str	r3, [r2, #0]
  GPIOB -> OTYPER |= (2 << I2C1_SDA*2);
 80004b2:	4b22      	ldr	r3, [pc, #136]	@ (800053c <I2CInit+0xf4>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	4a21      	ldr	r2, [pc, #132]	@ (800053c <I2CInit+0xf4>)
 80004b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004bc:	6053      	str	r3, [r2, #4]
  GPIOB -> PUPDR &= ~(3U << I2C1_SDA*2);
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <I2CInit+0xf4>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4a1e      	ldr	r2, [pc, #120]	@ (800053c <I2CInit+0xf4>)
 80004c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004c8:	60d3      	str	r3, [r2, #12]

  GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos);
 80004ca:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <I2CInit+0xf4>)
 80004cc:	6a1b      	ldr	r3, [r3, #32]
 80004ce:	4a1b      	ldr	r2, [pc, #108]	@ (800053c <I2CInit+0xf4>)
 80004d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004d4:	6213      	str	r3, [r2, #32]
  GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos);
 80004d6:	4b19      	ldr	r3, [pc, #100]	@ (800053c <I2CInit+0xf4>)
 80004d8:	6a1b      	ldr	r3, [r3, #32]
 80004da:	4a18      	ldr	r2, [pc, #96]	@ (800053c <I2CInit+0xf4>)
 80004dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80004e0:	6213      	str	r3, [r2, #32]


    RCC->AHB1ENR |= RCC_APB1ENR_I2C1EN;
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <I2CInit+0xf0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <I2CInit+0xf0>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
    DelayMs(50);
 80004ee:	2032      	movs	r0, #50	@ 0x32
 80004f0:	f7ff feba 	bl	8000268 <DelayMs>

  I2C1-> CR1 = I2C_CR1_SWRST;
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <I2CInit+0xf8>)
 80004f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004fa:	601a      	str	r2, [r3, #0]
  I2C1->CR1 = 0;
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <I2CInit+0xf8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]

  I2C1 -> CR2 &= ~(I2C_CR2_ITERREN);
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <I2CInit+0xf8>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <I2CInit+0xf8>)
 8000508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800050c:	6053      	str	r3, [r2, #4]
  I2C1->CCR &= ~(1 << I2C_CR1_ACK_Pos);
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <I2CInit+0xf8>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <I2CInit+0xf8>)
 8000514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000518:	61d3      	str	r3, [r2, #28]

  I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos);
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <I2CInit+0xf8>)
 800051c:	6a1b      	ldr	r3, [r3, #32]
 800051e:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <I2CInit+0xf8>)
 8000520:	f043 0311 	orr.w	r3, r3, #17
 8000524:	6213      	str	r3, [r2, #32]
  I2C1->CR1 |= I2C_CR1_PE;
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <I2CInit+0xf8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <I2CInit+0xf8>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800
 800053c:	40020400 	.word	0x40020400
 8000540:	40005400 	.word	0x40005400

08000544 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
   char str[32] = "DESD";
 800054a:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <main+0x40>)
 800054c:	463b      	mov	r3, r7
 800054e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000552:	6018      	str	r0, [r3, #0]
 8000554:	3304      	adds	r3, #4
 8000556:	7019      	strb	r1, [r3, #0]
 8000558:	1d7b      	adds	r3, r7, #5
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	f8c3 2017 	str.w	r2, [r3, #23]
   SystemInit();
 800056c:	f000 f80c 	bl	8000588 <SystemInit>
   EEPROM_Init();
 8000570:	f7ff fe2a 	bl	80001c8 <EEPROM_Init>
   //EEPROM_Write(0x0020, (uint8_t*)"GOD BLESS YOU!\r\n", 16);
   EEPROM_Read(0x0020,(uint8_t*)str,16);
 8000574:	463b      	mov	r3, r7
 8000576:	2210      	movs	r2, #16
 8000578:	4619      	mov	r1, r3
 800057a:	2020      	movs	r0, #32
 800057c:	f7ff fe35 	bl	80001ea <EEPROM_Read>
   while(1);
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x3c>
 8000584:	080006a8 	.word	0x080006a8

08000588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  DWT_Init();
 800058c:	f000 f802 	bl	8000594 <DWT_Init>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <DWT_Init+0x58>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <DWT_Init+0x58>)
 800059e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <DWT_Init+0x58>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a10      	ldr	r2, [pc, #64]	@ (80005ec <DWT_Init+0x58>)
 80005aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <DWT_Init+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <DWT_Init+0x5c>)
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <DWT_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	@ (80005f0 <DWT_Init+0x5c>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <DWT_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ce:	bf00      	nop
    __ASM volatile ("NOP");
 80005d0:	bf00      	nop
    __ASM volatile ("NOP");
 80005d2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <DWT_Init+0x5c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000edf0 	.word	0xe000edf0
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff ffc6 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f000 f811 	bl	8000648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff ff8d 	bl	8000544 <main>

0800062a <LoopForever>:

LoopForever:
  b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000638:	080006d0 	.word	0x080006d0
  ldr r2, =_sbss
 800063c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000640:	20000020 	.word	0x20000020

08000644 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC_IRQHandler>
	...

08000648 <__libc_init_array>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	4d0d      	ldr	r5, [pc, #52]	@ (8000680 <__libc_init_array+0x38>)
 800064c:	4c0d      	ldr	r4, [pc, #52]	@ (8000684 <__libc_init_array+0x3c>)
 800064e:	1b64      	subs	r4, r4, r5
 8000650:	10a4      	asrs	r4, r4, #2
 8000652:	2600      	movs	r6, #0
 8000654:	42a6      	cmp	r6, r4
 8000656:	d109      	bne.n	800066c <__libc_init_array+0x24>
 8000658:	4d0b      	ldr	r5, [pc, #44]	@ (8000688 <__libc_init_array+0x40>)
 800065a:	4c0c      	ldr	r4, [pc, #48]	@ (800068c <__libc_init_array+0x44>)
 800065c:	f000 f818 	bl	8000690 <_init>
 8000660:	1b64      	subs	r4, r4, r5
 8000662:	10a4      	asrs	r4, r4, #2
 8000664:	2600      	movs	r6, #0
 8000666:	42a6      	cmp	r6, r4
 8000668:	d105      	bne.n	8000676 <__libc_init_array+0x2e>
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000670:	4798      	blx	r3
 8000672:	3601      	adds	r6, #1
 8000674:	e7ee      	b.n	8000654 <__libc_init_array+0xc>
 8000676:	f855 3b04 	ldr.w	r3, [r5], #4
 800067a:	4798      	blx	r3
 800067c:	3601      	adds	r6, #1
 800067e:	e7f2      	b.n	8000666 <__libc_init_array+0x1e>
 8000680:	080006c8 	.word	0x080006c8
 8000684:	080006c8 	.word	0x080006c8
 8000688:	080006c8 	.word	0x080006c8
 800068c:	080006cc 	.word	0x080006cc

08000690 <_init>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr

0800069c <_fini>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	bf00      	nop
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr
