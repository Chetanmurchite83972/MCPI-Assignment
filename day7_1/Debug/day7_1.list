
day7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001020  08001020  00002020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001058  08001058  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001058  08001058  00002058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001060  08001060  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001060  08001060  00002060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001064  08001064  00002064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001068  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          0000016c  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001444  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000629  00000000  00000000  000044be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00004ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b7  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184b7  00000000  00000000  00004cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a4f  00000000  00000000  0001d16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c2cc  00000000  00000000  0001ebbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aae89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007c0  00000000  00000000  000aaecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ab68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  000ab6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001008 	.word	0x08001008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	08001008 	.word	0x08001008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0

	int C = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	char str[16];
	    SystemInit();
 800027a:	f000 f8f1 	bl	8000460 <SystemInit>
		SwitchInit(SWITCH);
 800027e:	2000      	movs	r0, #0
 8000280:	f000 f842 	bl	8000308 <SwitchInit>
		while(1)
		{

			UartInit(BAUD_9600);
 8000284:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000288:	f000 f920 	bl	80004cc <UartInit>
			//UartPuts("Enter Strings...\r\n");
			//UartPuts("Count: \n");
			while(exti0_flag == 0)
 800028c:	bf00      	nop
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <main+0x58>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0fb      	beq.n	800028e <main+0x1e>
				;
			UartGets(str);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f9cd 	bl	8000638 <UartGets>
			UartPuts(str);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9ad 	bl	8000600 <UartPuts>
							;
				sprintf(str,"\r%d",C);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	697a      	ldr	r2, [r7, #20]
 80002aa:	4908      	ldr	r1, [pc, #32]	@ (80002cc <main+0x5c>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fa13 	bl	80006d8 <siprintf>
				UartPuts(str);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f9a3 	bl	8000600 <UartPuts>
                C++;
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	3301      	adds	r3, #1
 80002be:	617b      	str	r3, [r7, #20]
                exti0_flag = 0;
 80002c0:	4b01      	ldr	r3, [pc, #4]	@ (80002c8 <main+0x58>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
			UartInit(BAUD_9600);
 80002c6:	e7dd      	b.n	8000284 <main+0x14>
 80002c8:	2000006c 	.word	0x2000006c
 80002cc:	08001020 	.word	0x08001020

080002d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db0b      	blt.n	80002fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f003 021f 	and.w	r2, r3, #31
 80002e8:	4906      	ldr	r1, [pc, #24]	@ (8000304 <__NVIC_EnableIRQ+0x34>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	095b      	lsrs	r3, r3, #5
 80002f0:	2001      	movs	r0, #1
 80002f2:	fa00 f202 	lsl.w	r2, r0, r2
 80002f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100

08000308 <SwitchInit>:

#include"switch.h"
//#include "uart.h"


void SwitchInit(uint32_t pin) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 8000310:	4b2a      	ldr	r3, [pc, #168]	@ (80003bc <SwitchInit+0xb4>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a29      	ldr	r2, [pc, #164]	@ (80003bc <SwitchInit+0xb4>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800031c:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <SwitchInit+0xb8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	3201      	adds	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	4091      	lsls	r1, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	0052      	lsls	r2, r2, #1
 800032e:	2001      	movs	r0, #1
 8000330:	fa00 f202 	lsl.w	r2, r0, r2
 8000334:	430a      	orrs	r2, r1
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a21      	ldr	r2, [pc, #132]	@ (80003c0 <SwitchInit+0xb8>)
 800033c:	400b      	ands	r3, r1
 800033e:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000340:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <SwitchInit+0xb8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	3201      	adds	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	4091      	lsls	r1, r2
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2001      	movs	r0, #1
 8000354:	fa00 f202 	lsl.w	r2, r0, r2
 8000358:	430a      	orrs	r2, r1
 800035a:	43d2      	mvns	r2, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a18      	ldr	r2, [pc, #96]	@ (80003c0 <SwitchInit+0xb8>)
 8000360:	400b      	ands	r3, r1
 8000362:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <SwitchInit+0xb8>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	3201      	adds	r2, #1
 800036e:	2101      	movs	r1, #1
 8000370:	4091      	lsls	r1, r2
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	0052      	lsls	r2, r2, #1
 8000376:	2001      	movs	r0, #1
 8000378:	fa00 f202 	lsl.w	r2, r0, r2
 800037c:	430a      	orrs	r2, r1
 800037e:	43d2      	mvns	r2, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <SwitchInit+0xb8>)
 8000384:	400b      	ands	r3, r1
 8000386:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <SwitchInit+0xbc>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <SwitchInit+0xbc>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
	EXTI->IMR |= BV(SWITCH);
 8000394:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <SwitchInit+0xbc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <SwitchInit+0xbc>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <SwitchInit+0xc0>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a08      	ldr	r2, [pc, #32]	@ (80003c8 <SwitchInit+0xc0>)
 80003a6:	f023 030f 	bic.w	r3, r3, #15
 80003aa:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 80003ac:	2006      	movs	r0, #6
 80003ae:	f7ff ff8f 	bl	80002d0 <__NVIC_EnableIRQ>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020000 	.word	0x40020000
 80003c4:	40013c00 	.word	0x40013c00
 80003c8:	40013800 	.word	0x40013800

080003cc <EXTI0_IRQHandler>:
}

volatile int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <EXTI0_IRQHandler+0x20>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a05      	ldr	r2, [pc, #20]	@ (80003ec <EXTI0_IRQHandler+0x20>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6153      	str	r3, [r2, #20]
	// Handle interrupt
	exti0_flag = 1;
 80003dc:	4b04      	ldr	r3, [pc, #16]	@ (80003f0 <EXTI0_IRQHandler+0x24>)
 80003de:	2201      	movs	r2, #1
 80003e0:	601a      	str	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40013c00 	.word	0x40013c00
 80003f0:	2000006c 	.word	0x2000006c

080003f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003fc:	4a14      	ldr	r2, [pc, #80]	@ (8000450 <_sbrk+0x5c>)
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <_sbrk+0x60>)
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000408:	4b13      	ldr	r3, [pc, #76]	@ (8000458 <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d102      	bne.n	8000416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <_sbrk+0x64>)
 8000412:	4a12      	ldr	r2, [pc, #72]	@ (800045c <_sbrk+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	693a      	ldr	r2, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d207      	bcs.n	8000434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000424:	f000 f978 	bl	8000718 <__errno>
 8000428:	4603      	mov	r3, r0
 800042a:	220c      	movs	r2, #12
 800042c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000432:	e009      	b.n	8000448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000434:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043a:	4b07      	ldr	r3, [pc, #28]	@ (8000458 <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <_sbrk+0x64>)
 8000444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000446:	68fb      	ldr	r3, [r7, #12]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20020000 	.word	0x20020000
 8000454:	00000400 	.word	0x00000400
 8000458:	20000070 	.word	0x20000070
 800045c:	200001c0 	.word	0x200001c0

08000460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  DWT_Init();
 8000464:	f000 f802 	bl	800046c <DWT_Init>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}

0800046c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000470:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <DWT_Init+0x58>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a13      	ldr	r2, [pc, #76]	@ (80004c4 <DWT_Init+0x58>)
 8000476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800047a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <DWT_Init+0x58>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a10      	ldr	r2, [pc, #64]	@ (80004c4 <DWT_Init+0x58>)
 8000482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000486:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000488:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <DWT_Init+0x5c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <DWT_Init+0x5c>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <DWT_Init+0x5c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0b      	ldr	r2, [pc, #44]	@ (80004c8 <DWT_Init+0x5c>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <DWT_Init+0x5c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004a6:	bf00      	nop
    __ASM volatile ("NOP");
 80004a8:	bf00      	nop
    __ASM volatile ("NOP");
 80004aa:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <DWT_Init+0x5c>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bf0c      	ite	eq
 80004b4:	2301      	moveq	r3, #1
 80004b6:	2300      	movne	r3, #0
 80004b8:	b2db      	uxtb	r3, r3
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000edf0 	.word	0xe000edf0
 80004c8:	e0001000 	.word	0xe0001000

080004cc <UartInit>:
#define RX_PIN  3
#define USART_ALT_FN   7


void UartInit(uint32_t baud)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80004d4:	4b31      	ldr	r3, [pc, #196]	@ (800059c <UartInit+0xd0>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d8:	4a30      	ldr	r2, [pc, #192]	@ (800059c <UartInit+0xd0>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80004e0:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <UartInit+0xd4>)
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	4a2e      	ldr	r2, [pc, #184]	@ (80005a0 <UartInit+0xd4>)
 80004e6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80004ea:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80004ec:	4b2c      	ldr	r3, [pc, #176]	@ (80005a0 <UartInit+0xd4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a2b      	ldr	r2, [pc, #172]	@ (80005a0 <UartInit+0xd4>)
 80004f2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <UartInit+0xd4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a28      	ldr	r2, [pc, #160]	@ (80005a0 <UartInit+0xd4>)
 80004fe:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000502:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <UartInit+0xd4>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4a25      	ldr	r2, [pc, #148]	@ (80005a0 <UartInit+0xd4>)
 800050a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800050e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <UartInit+0xd4>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a22      	ldr	r2, [pc, #136]	@ (80005a0 <UartInit+0xd4>)
 8000516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800051a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <UartInit+0xd4>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4a1f      	ldr	r2, [pc, #124]	@ (80005a0 <UartInit+0xd4>)
 8000522:	f023 030c 	bic.w	r3, r3, #12
 8000526:	6053      	str	r3, [r2, #4]

		// UART Config
		// enable uart clock
		RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <UartInit+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	4a1b      	ldr	r2, [pc, #108]	@ (800059c <UartInit+0xd0>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000532:	6413      	str	r3, [r2, #64]	@ 0x40
		// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
		USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <UartInit+0xd8>)
 8000536:	220c      	movs	r2, #12
 8000538:	60da      	str	r2, [r3, #12]
		// 1 stop bit (STOP=00), disable clock (CLKEN=0)
		USART2->CR2 = 0x00000000;
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <UartInit+0xd8>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
		// no hw control, no irda, no dma, no interupts
		USART2->CR3 = 0x00000000;
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <UartInit+0xd8>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
		switch(baud) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800054c:	d016      	beq.n	800057c <UartInit+0xb0>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000554:	d816      	bhi.n	8000584 <UartInit+0xb8>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800055c:	d004      	beq.n	8000568 <UartInit+0x9c>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000564:	d005      	beq.n	8000572 <UartInit+0xa6>
 8000566:	e00d      	b.n	8000584 <UartInit+0xb8>
				case BAUD_9600:
					USART2->BRR = BAUD_BRR_9600;
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <UartInit+0xd8>)
 800056a:	f240 6283 	movw	r2, #1667	@ 0x683
 800056e:	609a      	str	r2, [r3, #8]
					break;
 8000570:	e008      	b.n	8000584 <UartInit+0xb8>
				case BAUD_38400:
					USART2->BRR = BAUD_BRR_38400;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <UartInit+0xd8>)
 8000574:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000578:	609a      	str	r2, [r3, #8]
					break;
 800057a:	e003      	b.n	8000584 <UartInit+0xb8>
				case BAUD_115200:
					USART2->BRR = BAUD_BRR_115200;
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <UartInit+0xd8>)
 800057e:	228b      	movs	r2, #139	@ 0x8b
 8000580:	609a      	str	r2, [r3, #8]
					break;
 8000582:	bf00      	nop
			}
			// uart enable (UE=1)
			USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <UartInit+0xd8>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <UartInit+0xd8>)
 800058a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40004400 	.word	0x40004400

080005a8 <UartPutch>:
void UartPutch(uint8_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
		while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80005b2:	bf00      	nop
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <UartPutch+0x28>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f9      	beq.n	80005b4 <UartPutch+0xc>
			;
		// write new byte in TDR
		USART2->DR = ch;
 80005c0:	4a03      	ldr	r2, [pc, #12]	@ (80005d0 <UartPutch+0x28>)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	6053      	str	r3, [r2, #4]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40004400 	.word	0x40004400

080005d4 <UartGetch>:
uint8_t UartGetch(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
		while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 80005da:	bf00      	nop
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <UartGetch+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f9      	beq.n	80005dc <UartGetch+0x8>
			;
		// read received byte from RDR
		char ch = USART2->DR;
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <UartGetch+0x28>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	71fb      	strb	r3, [r7, #7]
		return ch;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40004400 	.word	0x40004400

08000600 <UartPuts>:
void UartPuts(char str[])
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	int i;
		for(i=0; str[i]!='\0'; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e009      	b.n	8000622 <UartPuts+0x22>
			UartPutch(str[i]);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffc6 	bl	80005a8 <UartPutch>
		for(i=0; str[i]!='\0'; i++)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1ef      	bne.n	800060e <UartPuts+0xe>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <UartGets>:
void UartGets(char str[])
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
		char ch;
		do {
			ch = UartGetch();
 8000644:	f7ff ffc6 	bl	80005d4 <UartGetch>
 8000648:	4603      	mov	r3, r0
 800064a:	72fb      	strb	r3, [r7, #11]
			str[i] = ch;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	7afa      	ldrb	r2, [r7, #11]
 8000654:	701a      	strb	r2, [r3, #0]
			i++;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
		} while(ch != '\r');
 800065c:	7afb      	ldrb	r3, [r7, #11]
 800065e:	2b0d      	cmp	r3, #13
 8000660:	d1f0      	bne.n	8000644 <UartGets+0xc>
		str[i] = '\n';
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	220a      	movs	r2, #10
 800066a:	701a      	strb	r2, [r3, #0]
		i++;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
		str[i] = '\0';
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	@ (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f7ff feea 	bl	8000460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	@ (80006c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	@ (80006d0 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b2:	f000 f837 	bl	8000724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fddb 	bl	8000270 <main>

080006ba <LoopForever>:

LoopForever:
  b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80006c8:	08001068 	.word	0x08001068
  ldr r2, =_sbss
 80006cc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80006d0:	200001bc 	.word	0x200001bc

080006d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC_IRQHandler>
	...

080006d8 <siprintf>:
 80006d8:	b40e      	push	{r1, r2, r3}
 80006da:	b500      	push	{lr}
 80006dc:	b09c      	sub	sp, #112	@ 0x70
 80006de:	ab1d      	add	r3, sp, #116	@ 0x74
 80006e0:	9002      	str	r0, [sp, #8]
 80006e2:	9006      	str	r0, [sp, #24]
 80006e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80006e8:	4809      	ldr	r0, [pc, #36]	@ (8000710 <siprintf+0x38>)
 80006ea:	9107      	str	r1, [sp, #28]
 80006ec:	9104      	str	r1, [sp, #16]
 80006ee:	4909      	ldr	r1, [pc, #36]	@ (8000714 <siprintf+0x3c>)
 80006f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80006f4:	9105      	str	r1, [sp, #20]
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	a902      	add	r1, sp, #8
 80006fc:	f000 f98c 	bl	8000a18 <_svfiprintf_r>
 8000700:	9b02      	ldr	r3, [sp, #8]
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	b01c      	add	sp, #112	@ 0x70
 8000708:	f85d eb04 	ldr.w	lr, [sp], #4
 800070c:	b003      	add	sp, #12
 800070e:	4770      	bx	lr
 8000710:	20000000 	.word	0x20000000
 8000714:	ffff0208 	.word	0xffff0208

08000718 <__errno>:
 8000718:	4b01      	ldr	r3, [pc, #4]	@ (8000720 <__errno+0x8>)
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000000 	.word	0x20000000

08000724 <__libc_init_array>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4d0d      	ldr	r5, [pc, #52]	@ (800075c <__libc_init_array+0x38>)
 8000728:	4c0d      	ldr	r4, [pc, #52]	@ (8000760 <__libc_init_array+0x3c>)
 800072a:	1b64      	subs	r4, r4, r5
 800072c:	10a4      	asrs	r4, r4, #2
 800072e:	2600      	movs	r6, #0
 8000730:	42a6      	cmp	r6, r4
 8000732:	d109      	bne.n	8000748 <__libc_init_array+0x24>
 8000734:	4d0b      	ldr	r5, [pc, #44]	@ (8000764 <__libc_init_array+0x40>)
 8000736:	4c0c      	ldr	r4, [pc, #48]	@ (8000768 <__libc_init_array+0x44>)
 8000738:	f000 fc66 	bl	8001008 <_init>
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	10a4      	asrs	r4, r4, #2
 8000740:	2600      	movs	r6, #0
 8000742:	42a6      	cmp	r6, r4
 8000744:	d105      	bne.n	8000752 <__libc_init_array+0x2e>
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f855 3b04 	ldr.w	r3, [r5], #4
 800074c:	4798      	blx	r3
 800074e:	3601      	adds	r6, #1
 8000750:	e7ee      	b.n	8000730 <__libc_init_array+0xc>
 8000752:	f855 3b04 	ldr.w	r3, [r5], #4
 8000756:	4798      	blx	r3
 8000758:	3601      	adds	r6, #1
 800075a:	e7f2      	b.n	8000742 <__libc_init_array+0x1e>
 800075c:	08001060 	.word	0x08001060
 8000760:	08001060 	.word	0x08001060
 8000764:	08001060 	.word	0x08001060
 8000768:	08001064 	.word	0x08001064

0800076c <__retarget_lock_acquire_recursive>:
 800076c:	4770      	bx	lr

0800076e <__retarget_lock_release_recursive>:
 800076e:	4770      	bx	lr

08000770 <_free_r>:
 8000770:	b538      	push	{r3, r4, r5, lr}
 8000772:	4605      	mov	r5, r0
 8000774:	2900      	cmp	r1, #0
 8000776:	d041      	beq.n	80007fc <_free_r+0x8c>
 8000778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800077c:	1f0c      	subs	r4, r1, #4
 800077e:	2b00      	cmp	r3, #0
 8000780:	bfb8      	it	lt
 8000782:	18e4      	addlt	r4, r4, r3
 8000784:	f000 f8e0 	bl	8000948 <__malloc_lock>
 8000788:	4a1d      	ldr	r2, [pc, #116]	@ (8000800 <_free_r+0x90>)
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	b933      	cbnz	r3, 800079c <_free_r+0x2c>
 800078e:	6063      	str	r3, [r4, #4]
 8000790:	6014      	str	r4, [r2, #0]
 8000792:	4628      	mov	r0, r5
 8000794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000798:	f000 b8dc 	b.w	8000954 <__malloc_unlock>
 800079c:	42a3      	cmp	r3, r4
 800079e:	d908      	bls.n	80007b2 <_free_r+0x42>
 80007a0:	6820      	ldr	r0, [r4, #0]
 80007a2:	1821      	adds	r1, r4, r0
 80007a4:	428b      	cmp	r3, r1
 80007a6:	bf01      	itttt	eq
 80007a8:	6819      	ldreq	r1, [r3, #0]
 80007aa:	685b      	ldreq	r3, [r3, #4]
 80007ac:	1809      	addeq	r1, r1, r0
 80007ae:	6021      	streq	r1, [r4, #0]
 80007b0:	e7ed      	b.n	800078e <_free_r+0x1e>
 80007b2:	461a      	mov	r2, r3
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	b10b      	cbz	r3, 80007bc <_free_r+0x4c>
 80007b8:	42a3      	cmp	r3, r4
 80007ba:	d9fa      	bls.n	80007b2 <_free_r+0x42>
 80007bc:	6811      	ldr	r1, [r2, #0]
 80007be:	1850      	adds	r0, r2, r1
 80007c0:	42a0      	cmp	r0, r4
 80007c2:	d10b      	bne.n	80007dc <_free_r+0x6c>
 80007c4:	6820      	ldr	r0, [r4, #0]
 80007c6:	4401      	add	r1, r0
 80007c8:	1850      	adds	r0, r2, r1
 80007ca:	4283      	cmp	r3, r0
 80007cc:	6011      	str	r1, [r2, #0]
 80007ce:	d1e0      	bne.n	8000792 <_free_r+0x22>
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	6053      	str	r3, [r2, #4]
 80007d6:	4408      	add	r0, r1
 80007d8:	6010      	str	r0, [r2, #0]
 80007da:	e7da      	b.n	8000792 <_free_r+0x22>
 80007dc:	d902      	bls.n	80007e4 <_free_r+0x74>
 80007de:	230c      	movs	r3, #12
 80007e0:	602b      	str	r3, [r5, #0]
 80007e2:	e7d6      	b.n	8000792 <_free_r+0x22>
 80007e4:	6820      	ldr	r0, [r4, #0]
 80007e6:	1821      	adds	r1, r4, r0
 80007e8:	428b      	cmp	r3, r1
 80007ea:	bf04      	itt	eq
 80007ec:	6819      	ldreq	r1, [r3, #0]
 80007ee:	685b      	ldreq	r3, [r3, #4]
 80007f0:	6063      	str	r3, [r4, #4]
 80007f2:	bf04      	itt	eq
 80007f4:	1809      	addeq	r1, r1, r0
 80007f6:	6021      	streq	r1, [r4, #0]
 80007f8:	6054      	str	r4, [r2, #4]
 80007fa:	e7ca      	b.n	8000792 <_free_r+0x22>
 80007fc:	bd38      	pop	{r3, r4, r5, pc}
 80007fe:	bf00      	nop
 8000800:	200001b8 	.word	0x200001b8

08000804 <sbrk_aligned>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	4e0f      	ldr	r6, [pc, #60]	@ (8000844 <sbrk_aligned+0x40>)
 8000808:	460c      	mov	r4, r1
 800080a:	6831      	ldr	r1, [r6, #0]
 800080c:	4605      	mov	r5, r0
 800080e:	b911      	cbnz	r1, 8000816 <sbrk_aligned+0x12>
 8000810:	f000 fba6 	bl	8000f60 <_sbrk_r>
 8000814:	6030      	str	r0, [r6, #0]
 8000816:	4621      	mov	r1, r4
 8000818:	4628      	mov	r0, r5
 800081a:	f000 fba1 	bl	8000f60 <_sbrk_r>
 800081e:	1c43      	adds	r3, r0, #1
 8000820:	d103      	bne.n	800082a <sbrk_aligned+0x26>
 8000822:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000826:	4620      	mov	r0, r4
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	1cc4      	adds	r4, r0, #3
 800082c:	f024 0403 	bic.w	r4, r4, #3
 8000830:	42a0      	cmp	r0, r4
 8000832:	d0f8      	beq.n	8000826 <sbrk_aligned+0x22>
 8000834:	1a21      	subs	r1, r4, r0
 8000836:	4628      	mov	r0, r5
 8000838:	f000 fb92 	bl	8000f60 <_sbrk_r>
 800083c:	3001      	adds	r0, #1
 800083e:	d1f2      	bne.n	8000826 <sbrk_aligned+0x22>
 8000840:	e7ef      	b.n	8000822 <sbrk_aligned+0x1e>
 8000842:	bf00      	nop
 8000844:	200001b4 	.word	0x200001b4

08000848 <_malloc_r>:
 8000848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800084c:	1ccd      	adds	r5, r1, #3
 800084e:	f025 0503 	bic.w	r5, r5, #3
 8000852:	3508      	adds	r5, #8
 8000854:	2d0c      	cmp	r5, #12
 8000856:	bf38      	it	cc
 8000858:	250c      	movcc	r5, #12
 800085a:	2d00      	cmp	r5, #0
 800085c:	4606      	mov	r6, r0
 800085e:	db01      	blt.n	8000864 <_malloc_r+0x1c>
 8000860:	42a9      	cmp	r1, r5
 8000862:	d904      	bls.n	800086e <_malloc_r+0x26>
 8000864:	230c      	movs	r3, #12
 8000866:	6033      	str	r3, [r6, #0]
 8000868:	2000      	movs	r0, #0
 800086a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800086e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000944 <_malloc_r+0xfc>
 8000872:	f000 f869 	bl	8000948 <__malloc_lock>
 8000876:	f8d8 3000 	ldr.w	r3, [r8]
 800087a:	461c      	mov	r4, r3
 800087c:	bb44      	cbnz	r4, 80008d0 <_malloc_r+0x88>
 800087e:	4629      	mov	r1, r5
 8000880:	4630      	mov	r0, r6
 8000882:	f7ff ffbf 	bl	8000804 <sbrk_aligned>
 8000886:	1c43      	adds	r3, r0, #1
 8000888:	4604      	mov	r4, r0
 800088a:	d158      	bne.n	800093e <_malloc_r+0xf6>
 800088c:	f8d8 4000 	ldr.w	r4, [r8]
 8000890:	4627      	mov	r7, r4
 8000892:	2f00      	cmp	r7, #0
 8000894:	d143      	bne.n	800091e <_malloc_r+0xd6>
 8000896:	2c00      	cmp	r4, #0
 8000898:	d04b      	beq.n	8000932 <_malloc_r+0xea>
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	4639      	mov	r1, r7
 800089e:	4630      	mov	r0, r6
 80008a0:	eb04 0903 	add.w	r9, r4, r3
 80008a4:	f000 fb5c 	bl	8000f60 <_sbrk_r>
 80008a8:	4581      	cmp	r9, r0
 80008aa:	d142      	bne.n	8000932 <_malloc_r+0xea>
 80008ac:	6821      	ldr	r1, [r4, #0]
 80008ae:	1a6d      	subs	r5, r5, r1
 80008b0:	4629      	mov	r1, r5
 80008b2:	4630      	mov	r0, r6
 80008b4:	f7ff ffa6 	bl	8000804 <sbrk_aligned>
 80008b8:	3001      	adds	r0, #1
 80008ba:	d03a      	beq.n	8000932 <_malloc_r+0xea>
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	442b      	add	r3, r5
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	f8d8 3000 	ldr.w	r3, [r8]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	bb62      	cbnz	r2, 8000924 <_malloc_r+0xdc>
 80008ca:	f8c8 7000 	str.w	r7, [r8]
 80008ce:	e00f      	b.n	80008f0 <_malloc_r+0xa8>
 80008d0:	6822      	ldr	r2, [r4, #0]
 80008d2:	1b52      	subs	r2, r2, r5
 80008d4:	d420      	bmi.n	8000918 <_malloc_r+0xd0>
 80008d6:	2a0b      	cmp	r2, #11
 80008d8:	d917      	bls.n	800090a <_malloc_r+0xc2>
 80008da:	1961      	adds	r1, r4, r5
 80008dc:	42a3      	cmp	r3, r4
 80008de:	6025      	str	r5, [r4, #0]
 80008e0:	bf18      	it	ne
 80008e2:	6059      	strne	r1, [r3, #4]
 80008e4:	6863      	ldr	r3, [r4, #4]
 80008e6:	bf08      	it	eq
 80008e8:	f8c8 1000 	streq.w	r1, [r8]
 80008ec:	5162      	str	r2, [r4, r5]
 80008ee:	604b      	str	r3, [r1, #4]
 80008f0:	4630      	mov	r0, r6
 80008f2:	f000 f82f 	bl	8000954 <__malloc_unlock>
 80008f6:	f104 000b 	add.w	r0, r4, #11
 80008fa:	1d23      	adds	r3, r4, #4
 80008fc:	f020 0007 	bic.w	r0, r0, #7
 8000900:	1ac2      	subs	r2, r0, r3
 8000902:	bf1c      	itt	ne
 8000904:	1a1b      	subne	r3, r3, r0
 8000906:	50a3      	strne	r3, [r4, r2]
 8000908:	e7af      	b.n	800086a <_malloc_r+0x22>
 800090a:	6862      	ldr	r2, [r4, #4]
 800090c:	42a3      	cmp	r3, r4
 800090e:	bf0c      	ite	eq
 8000910:	f8c8 2000 	streq.w	r2, [r8]
 8000914:	605a      	strne	r2, [r3, #4]
 8000916:	e7eb      	b.n	80008f0 <_malloc_r+0xa8>
 8000918:	4623      	mov	r3, r4
 800091a:	6864      	ldr	r4, [r4, #4]
 800091c:	e7ae      	b.n	800087c <_malloc_r+0x34>
 800091e:	463c      	mov	r4, r7
 8000920:	687f      	ldr	r7, [r7, #4]
 8000922:	e7b6      	b.n	8000892 <_malloc_r+0x4a>
 8000924:	461a      	mov	r2, r3
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	42a3      	cmp	r3, r4
 800092a:	d1fb      	bne.n	8000924 <_malloc_r+0xdc>
 800092c:	2300      	movs	r3, #0
 800092e:	6053      	str	r3, [r2, #4]
 8000930:	e7de      	b.n	80008f0 <_malloc_r+0xa8>
 8000932:	230c      	movs	r3, #12
 8000934:	6033      	str	r3, [r6, #0]
 8000936:	4630      	mov	r0, r6
 8000938:	f000 f80c 	bl	8000954 <__malloc_unlock>
 800093c:	e794      	b.n	8000868 <_malloc_r+0x20>
 800093e:	6005      	str	r5, [r0, #0]
 8000940:	e7d6      	b.n	80008f0 <_malloc_r+0xa8>
 8000942:	bf00      	nop
 8000944:	200001b8 	.word	0x200001b8

08000948 <__malloc_lock>:
 8000948:	4801      	ldr	r0, [pc, #4]	@ (8000950 <__malloc_lock+0x8>)
 800094a:	f7ff bf0f 	b.w	800076c <__retarget_lock_acquire_recursive>
 800094e:	bf00      	nop
 8000950:	200001b0 	.word	0x200001b0

08000954 <__malloc_unlock>:
 8000954:	4801      	ldr	r0, [pc, #4]	@ (800095c <__malloc_unlock+0x8>)
 8000956:	f7ff bf0a 	b.w	800076e <__retarget_lock_release_recursive>
 800095a:	bf00      	nop
 800095c:	200001b0 	.word	0x200001b0

08000960 <__ssputs_r>:
 8000960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000964:	688e      	ldr	r6, [r1, #8]
 8000966:	461f      	mov	r7, r3
 8000968:	42be      	cmp	r6, r7
 800096a:	680b      	ldr	r3, [r1, #0]
 800096c:	4682      	mov	sl, r0
 800096e:	460c      	mov	r4, r1
 8000970:	4690      	mov	r8, r2
 8000972:	d82d      	bhi.n	80009d0 <__ssputs_r+0x70>
 8000974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000978:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800097c:	d026      	beq.n	80009cc <__ssputs_r+0x6c>
 800097e:	6965      	ldr	r5, [r4, #20]
 8000980:	6909      	ldr	r1, [r1, #16]
 8000982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000986:	eba3 0901 	sub.w	r9, r3, r1
 800098a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800098e:	1c7b      	adds	r3, r7, #1
 8000990:	444b      	add	r3, r9
 8000992:	106d      	asrs	r5, r5, #1
 8000994:	429d      	cmp	r5, r3
 8000996:	bf38      	it	cc
 8000998:	461d      	movcc	r5, r3
 800099a:	0553      	lsls	r3, r2, #21
 800099c:	d527      	bpl.n	80009ee <__ssputs_r+0x8e>
 800099e:	4629      	mov	r1, r5
 80009a0:	f7ff ff52 	bl	8000848 <_malloc_r>
 80009a4:	4606      	mov	r6, r0
 80009a6:	b360      	cbz	r0, 8000a02 <__ssputs_r+0xa2>
 80009a8:	6921      	ldr	r1, [r4, #16]
 80009aa:	464a      	mov	r2, r9
 80009ac:	f000 fae8 	bl	8000f80 <memcpy>
 80009b0:	89a3      	ldrh	r3, [r4, #12]
 80009b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80009b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ba:	81a3      	strh	r3, [r4, #12]
 80009bc:	6126      	str	r6, [r4, #16]
 80009be:	6165      	str	r5, [r4, #20]
 80009c0:	444e      	add	r6, r9
 80009c2:	eba5 0509 	sub.w	r5, r5, r9
 80009c6:	6026      	str	r6, [r4, #0]
 80009c8:	60a5      	str	r5, [r4, #8]
 80009ca:	463e      	mov	r6, r7
 80009cc:	42be      	cmp	r6, r7
 80009ce:	d900      	bls.n	80009d2 <__ssputs_r+0x72>
 80009d0:	463e      	mov	r6, r7
 80009d2:	6820      	ldr	r0, [r4, #0]
 80009d4:	4632      	mov	r2, r6
 80009d6:	4641      	mov	r1, r8
 80009d8:	f000 faa8 	bl	8000f2c <memmove>
 80009dc:	68a3      	ldr	r3, [r4, #8]
 80009de:	1b9b      	subs	r3, r3, r6
 80009e0:	60a3      	str	r3, [r4, #8]
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	4433      	add	r3, r6
 80009e6:	6023      	str	r3, [r4, #0]
 80009e8:	2000      	movs	r0, #0
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	462a      	mov	r2, r5
 80009f0:	f000 fad4 	bl	8000f9c <_realloc_r>
 80009f4:	4606      	mov	r6, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d1e0      	bne.n	80009bc <__ssputs_r+0x5c>
 80009fa:	6921      	ldr	r1, [r4, #16]
 80009fc:	4650      	mov	r0, sl
 80009fe:	f7ff feb7 	bl	8000770 <_free_r>
 8000a02:	230c      	movs	r3, #12
 8000a04:	f8ca 3000 	str.w	r3, [sl]
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	81a3      	strh	r3, [r4, #12]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a14:	e7e9      	b.n	80009ea <__ssputs_r+0x8a>
	...

08000a18 <_svfiprintf_r>:
 8000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	898b      	ldrh	r3, [r1, #12]
 8000a20:	061b      	lsls	r3, r3, #24
 8000a22:	b09d      	sub	sp, #116	@ 0x74
 8000a24:	4607      	mov	r7, r0
 8000a26:	460d      	mov	r5, r1
 8000a28:	4614      	mov	r4, r2
 8000a2a:	d510      	bpl.n	8000a4e <_svfiprintf_r+0x36>
 8000a2c:	690b      	ldr	r3, [r1, #16]
 8000a2e:	b973      	cbnz	r3, 8000a4e <_svfiprintf_r+0x36>
 8000a30:	2140      	movs	r1, #64	@ 0x40
 8000a32:	f7ff ff09 	bl	8000848 <_malloc_r>
 8000a36:	6028      	str	r0, [r5, #0]
 8000a38:	6128      	str	r0, [r5, #16]
 8000a3a:	b930      	cbnz	r0, 8000a4a <_svfiprintf_r+0x32>
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a44:	b01d      	add	sp, #116	@ 0x74
 8000a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	616b      	str	r3, [r5, #20]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a52:	2320      	movs	r3, #32
 8000a54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a5c:	2330      	movs	r3, #48	@ 0x30
 8000a5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000bfc <_svfiprintf_r+0x1e4>
 8000a62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a66:	f04f 0901 	mov.w	r9, #1
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a72:	b10a      	cbz	r2, 8000a78 <_svfiprintf_r+0x60>
 8000a74:	2a25      	cmp	r2, #37	@ 0x25
 8000a76:	d1f9      	bne.n	8000a6c <_svfiprintf_r+0x54>
 8000a78:	ebba 0b04 	subs.w	fp, sl, r4
 8000a7c:	d00b      	beq.n	8000a96 <_svfiprintf_r+0x7e>
 8000a7e:	465b      	mov	r3, fp
 8000a80:	4622      	mov	r2, r4
 8000a82:	4629      	mov	r1, r5
 8000a84:	4638      	mov	r0, r7
 8000a86:	f7ff ff6b 	bl	8000960 <__ssputs_r>
 8000a8a:	3001      	adds	r0, #1
 8000a8c:	f000 80a7 	beq.w	8000bde <_svfiprintf_r+0x1c6>
 8000a90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a92:	445a      	add	r2, fp
 8000a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a96:	f89a 3000 	ldrb.w	r3, [sl]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 809f 	beq.w	8000bde <_svfiprintf_r+0x1c6>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000aaa:	f10a 0a01 	add.w	sl, sl, #1
 8000aae:	9304      	str	r3, [sp, #16]
 8000ab0:	9307      	str	r3, [sp, #28]
 8000ab2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ab6:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ab8:	4654      	mov	r4, sl
 8000aba:	2205      	movs	r2, #5
 8000abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac0:	484e      	ldr	r0, [pc, #312]	@ (8000bfc <_svfiprintf_r+0x1e4>)
 8000ac2:	f7ff fb85 	bl	80001d0 <memchr>
 8000ac6:	9a04      	ldr	r2, [sp, #16]
 8000ac8:	b9d8      	cbnz	r0, 8000b02 <_svfiprintf_r+0xea>
 8000aca:	06d0      	lsls	r0, r2, #27
 8000acc:	bf44      	itt	mi
 8000ace:	2320      	movmi	r3, #32
 8000ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ad4:	0711      	lsls	r1, r2, #28
 8000ad6:	bf44      	itt	mi
 8000ad8:	232b      	movmi	r3, #43	@ 0x2b
 8000ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ade:	f89a 3000 	ldrb.w	r3, [sl]
 8000ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ae4:	d015      	beq.n	8000b12 <_svfiprintf_r+0xfa>
 8000ae6:	9a07      	ldr	r2, [sp, #28]
 8000ae8:	4654      	mov	r4, sl
 8000aea:	2000      	movs	r0, #0
 8000aec:	f04f 0c0a 	mov.w	ip, #10
 8000af0:	4621      	mov	r1, r4
 8000af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000af6:	3b30      	subs	r3, #48	@ 0x30
 8000af8:	2b09      	cmp	r3, #9
 8000afa:	d94b      	bls.n	8000b94 <_svfiprintf_r+0x17c>
 8000afc:	b1b0      	cbz	r0, 8000b2c <_svfiprintf_r+0x114>
 8000afe:	9207      	str	r2, [sp, #28]
 8000b00:	e014      	b.n	8000b2c <_svfiprintf_r+0x114>
 8000b02:	eba0 0308 	sub.w	r3, r0, r8
 8000b06:	fa09 f303 	lsl.w	r3, r9, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	9304      	str	r3, [sp, #16]
 8000b0e:	46a2      	mov	sl, r4
 8000b10:	e7d2      	b.n	8000ab8 <_svfiprintf_r+0xa0>
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	1d19      	adds	r1, r3, #4
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	9103      	str	r1, [sp, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bfbb      	ittet	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	f042 0202 	orrlt.w	r2, r2, #2
 8000b24:	9307      	strge	r3, [sp, #28]
 8000b26:	9307      	strlt	r3, [sp, #28]
 8000b28:	bfb8      	it	lt
 8000b2a:	9204      	strlt	r2, [sp, #16]
 8000b2c:	7823      	ldrb	r3, [r4, #0]
 8000b2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b30:	d10a      	bne.n	8000b48 <_svfiprintf_r+0x130>
 8000b32:	7863      	ldrb	r3, [r4, #1]
 8000b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b36:	d132      	bne.n	8000b9e <_svfiprintf_r+0x186>
 8000b38:	9b03      	ldr	r3, [sp, #12]
 8000b3a:	1d1a      	adds	r2, r3, #4
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	9203      	str	r2, [sp, #12]
 8000b40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b44:	3402      	adds	r4, #2
 8000b46:	9305      	str	r3, [sp, #20]
 8000b48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000c00 <_svfiprintf_r+0x1e8>
 8000b4c:	7821      	ldrb	r1, [r4, #0]
 8000b4e:	2203      	movs	r2, #3
 8000b50:	4650      	mov	r0, sl
 8000b52:	f7ff fb3d 	bl	80001d0 <memchr>
 8000b56:	b138      	cbz	r0, 8000b68 <_svfiprintf_r+0x150>
 8000b58:	9b04      	ldr	r3, [sp, #16]
 8000b5a:	eba0 000a 	sub.w	r0, r0, sl
 8000b5e:	2240      	movs	r2, #64	@ 0x40
 8000b60:	4082      	lsls	r2, r0
 8000b62:	4313      	orrs	r3, r2
 8000b64:	3401      	adds	r4, #1
 8000b66:	9304      	str	r3, [sp, #16]
 8000b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6c:	4825      	ldr	r0, [pc, #148]	@ (8000c04 <_svfiprintf_r+0x1ec>)
 8000b6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b72:	2206      	movs	r2, #6
 8000b74:	f7ff fb2c 	bl	80001d0 <memchr>
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d036      	beq.n	8000bea <_svfiprintf_r+0x1d2>
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <_svfiprintf_r+0x1f0>)
 8000b7e:	bb1b      	cbnz	r3, 8000bc8 <_svfiprintf_r+0x1b0>
 8000b80:	9b03      	ldr	r3, [sp, #12]
 8000b82:	3307      	adds	r3, #7
 8000b84:	f023 0307 	bic.w	r3, r3, #7
 8000b88:	3308      	adds	r3, #8
 8000b8a:	9303      	str	r3, [sp, #12]
 8000b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b8e:	4433      	add	r3, r6
 8000b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b92:	e76a      	b.n	8000a6a <_svfiprintf_r+0x52>
 8000b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b98:	460c      	mov	r4, r1
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e7a8      	b.n	8000af0 <_svfiprintf_r+0xd8>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	9305      	str	r3, [sp, #20]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 0c0a 	mov.w	ip, #10
 8000baa:	4620      	mov	r0, r4
 8000bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bb0:	3a30      	subs	r2, #48	@ 0x30
 8000bb2:	2a09      	cmp	r2, #9
 8000bb4:	d903      	bls.n	8000bbe <_svfiprintf_r+0x1a6>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0c6      	beq.n	8000b48 <_svfiprintf_r+0x130>
 8000bba:	9105      	str	r1, [sp, #20]
 8000bbc:	e7c4      	b.n	8000b48 <_svfiprintf_r+0x130>
 8000bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e7f0      	b.n	8000baa <_svfiprintf_r+0x192>
 8000bc8:	ab03      	add	r3, sp, #12
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	462a      	mov	r2, r5
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <_svfiprintf_r+0x1f4>)
 8000bd0:	a904      	add	r1, sp, #16
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	1c42      	adds	r2, r0, #1
 8000bda:	4606      	mov	r6, r0
 8000bdc:	d1d6      	bne.n	8000b8c <_svfiprintf_r+0x174>
 8000bde:	89ab      	ldrh	r3, [r5, #12]
 8000be0:	065b      	lsls	r3, r3, #25
 8000be2:	f53f af2d 	bmi.w	8000a40 <_svfiprintf_r+0x28>
 8000be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000be8:	e72c      	b.n	8000a44 <_svfiprintf_r+0x2c>
 8000bea:	ab03      	add	r3, sp, #12
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	462a      	mov	r2, r5
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <_svfiprintf_r+0x1f4>)
 8000bf2:	a904      	add	r1, sp, #16
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	f000 f879 	bl	8000cec <_printf_i>
 8000bfa:	e7ed      	b.n	8000bd8 <_svfiprintf_r+0x1c0>
 8000bfc:	08001024 	.word	0x08001024
 8000c00:	0800102a 	.word	0x0800102a
 8000c04:	0800102e 	.word	0x0800102e
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	08000961 	.word	0x08000961

08000c10 <_printf_common>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	4616      	mov	r6, r2
 8000c16:	4698      	mov	r8, r3
 8000c18:	688a      	ldr	r2, [r1, #8]
 8000c1a:	690b      	ldr	r3, [r1, #16]
 8000c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bfb8      	it	lt
 8000c24:	4613      	movlt	r3, r2
 8000c26:	6033      	str	r3, [r6, #0]
 8000c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c2c:	4607      	mov	r7, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	b10a      	cbz	r2, 8000c36 <_printf_common+0x26>
 8000c32:	3301      	adds	r3, #1
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	0699      	lsls	r1, r3, #26
 8000c3a:	bf42      	ittt	mi
 8000c3c:	6833      	ldrmi	r3, [r6, #0]
 8000c3e:	3302      	addmi	r3, #2
 8000c40:	6033      	strmi	r3, [r6, #0]
 8000c42:	6825      	ldr	r5, [r4, #0]
 8000c44:	f015 0506 	ands.w	r5, r5, #6
 8000c48:	d106      	bne.n	8000c58 <_printf_common+0x48>
 8000c4a:	f104 0a19 	add.w	sl, r4, #25
 8000c4e:	68e3      	ldr	r3, [r4, #12]
 8000c50:	6832      	ldr	r2, [r6, #0]
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	dc26      	bgt.n	8000ca6 <_printf_common+0x96>
 8000c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c5c:	6822      	ldr	r2, [r4, #0]
 8000c5e:	3b00      	subs	r3, #0
 8000c60:	bf18      	it	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	0692      	lsls	r2, r2, #26
 8000c66:	d42b      	bmi.n	8000cc0 <_printf_common+0xb0>
 8000c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	4638      	mov	r0, r7
 8000c70:	47c8      	blx	r9
 8000c72:	3001      	adds	r0, #1
 8000c74:	d01e      	beq.n	8000cb4 <_printf_common+0xa4>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	6922      	ldr	r2, [r4, #16]
 8000c7a:	f003 0306 	and.w	r3, r3, #6
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf02      	ittt	eq
 8000c82:	68e5      	ldreq	r5, [r4, #12]
 8000c84:	6833      	ldreq	r3, [r6, #0]
 8000c86:	1aed      	subeq	r5, r5, r3
 8000c88:	68a3      	ldr	r3, [r4, #8]
 8000c8a:	bf0c      	ite	eq
 8000c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c90:	2500      	movne	r5, #0
 8000c92:	4293      	cmp	r3, r2
 8000c94:	bfc4      	itt	gt
 8000c96:	1a9b      	subgt	r3, r3, r2
 8000c98:	18ed      	addgt	r5, r5, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	341a      	adds	r4, #26
 8000c9e:	42b5      	cmp	r5, r6
 8000ca0:	d11a      	bne.n	8000cd8 <_printf_common+0xc8>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e008      	b.n	8000cb8 <_printf_common+0xa8>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	4652      	mov	r2, sl
 8000caa:	4641      	mov	r1, r8
 8000cac:	4638      	mov	r0, r7
 8000cae:	47c8      	blx	r9
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d103      	bne.n	8000cbc <_printf_common+0xac>
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	3501      	adds	r5, #1
 8000cbe:	e7c6      	b.n	8000c4e <_printf_common+0x3e>
 8000cc0:	18e1      	adds	r1, r4, r3
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	2030      	movs	r0, #48	@ 0x30
 8000cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cca:	4422      	add	r2, r4
 8000ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	e7c7      	b.n	8000c68 <_printf_common+0x58>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4622      	mov	r2, r4
 8000cdc:	4641      	mov	r1, r8
 8000cde:	4638      	mov	r0, r7
 8000ce0:	47c8      	blx	r9
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	d0e6      	beq.n	8000cb4 <_printf_common+0xa4>
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	e7d9      	b.n	8000c9e <_printf_common+0x8e>
	...

08000cec <_printf_i>:
 8000cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	7e0f      	ldrb	r7, [r1, #24]
 8000cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cf4:	2f78      	cmp	r7, #120	@ 0x78
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	4680      	mov	r8, r0
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d02:	d807      	bhi.n	8000d14 <_printf_i+0x28>
 8000d04:	2f62      	cmp	r7, #98	@ 0x62
 8000d06:	d80a      	bhi.n	8000d1e <_printf_i+0x32>
 8000d08:	2f00      	cmp	r7, #0
 8000d0a:	f000 80d2 	beq.w	8000eb2 <_printf_i+0x1c6>
 8000d0e:	2f58      	cmp	r7, #88	@ 0x58
 8000d10:	f000 80b9 	beq.w	8000e86 <_printf_i+0x19a>
 8000d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d1c:	e03a      	b.n	8000d94 <_printf_i+0xa8>
 8000d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d22:	2b15      	cmp	r3, #21
 8000d24:	d8f6      	bhi.n	8000d14 <_printf_i+0x28>
 8000d26:	a101      	add	r1, pc, #4	@ (adr r1, 8000d2c <_printf_i+0x40>)
 8000d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d2c:	08000d85 	.word	0x08000d85
 8000d30:	08000d99 	.word	0x08000d99
 8000d34:	08000d15 	.word	0x08000d15
 8000d38:	08000d15 	.word	0x08000d15
 8000d3c:	08000d15 	.word	0x08000d15
 8000d40:	08000d15 	.word	0x08000d15
 8000d44:	08000d99 	.word	0x08000d99
 8000d48:	08000d15 	.word	0x08000d15
 8000d4c:	08000d15 	.word	0x08000d15
 8000d50:	08000d15 	.word	0x08000d15
 8000d54:	08000d15 	.word	0x08000d15
 8000d58:	08000e99 	.word	0x08000e99
 8000d5c:	08000dc3 	.word	0x08000dc3
 8000d60:	08000e53 	.word	0x08000e53
 8000d64:	08000d15 	.word	0x08000d15
 8000d68:	08000d15 	.word	0x08000d15
 8000d6c:	08000ebb 	.word	0x08000ebb
 8000d70:	08000d15 	.word	0x08000d15
 8000d74:	08000dc3 	.word	0x08000dc3
 8000d78:	08000d15 	.word	0x08000d15
 8000d7c:	08000d15 	.word	0x08000d15
 8000d80:	08000e5b 	.word	0x08000e5b
 8000d84:	6833      	ldr	r3, [r6, #0]
 8000d86:	1d1a      	adds	r2, r3, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6032      	str	r2, [r6, #0]
 8000d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d94:	2301      	movs	r3, #1
 8000d96:	e09d      	b.n	8000ed4 <_printf_i+0x1e8>
 8000d98:	6833      	ldr	r3, [r6, #0]
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	1d19      	adds	r1, r3, #4
 8000d9e:	6031      	str	r1, [r6, #0]
 8000da0:	0606      	lsls	r6, r0, #24
 8000da2:	d501      	bpl.n	8000da8 <_printf_i+0xbc>
 8000da4:	681d      	ldr	r5, [r3, #0]
 8000da6:	e003      	b.n	8000db0 <_printf_i+0xc4>
 8000da8:	0645      	lsls	r5, r0, #25
 8000daa:	d5fb      	bpl.n	8000da4 <_printf_i+0xb8>
 8000dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	da03      	bge.n	8000dbc <_printf_i+0xd0>
 8000db4:	232d      	movs	r3, #45	@ 0x2d
 8000db6:	426d      	negs	r5, r5
 8000db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dbc:	4859      	ldr	r0, [pc, #356]	@ (8000f24 <_printf_i+0x238>)
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	e011      	b.n	8000de6 <_printf_i+0xfa>
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	6833      	ldr	r3, [r6, #0]
 8000dc6:	0608      	lsls	r0, r1, #24
 8000dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000dcc:	d402      	bmi.n	8000dd4 <_printf_i+0xe8>
 8000dce:	0649      	lsls	r1, r1, #25
 8000dd0:	bf48      	it	mi
 8000dd2:	b2ad      	uxthmi	r5, r5
 8000dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dd6:	4853      	ldr	r0, [pc, #332]	@ (8000f24 <_printf_i+0x238>)
 8000dd8:	6033      	str	r3, [r6, #0]
 8000dda:	bf14      	ite	ne
 8000ddc:	230a      	movne	r3, #10
 8000dde:	2308      	moveq	r3, #8
 8000de0:	2100      	movs	r1, #0
 8000de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000de6:	6866      	ldr	r6, [r4, #4]
 8000de8:	60a6      	str	r6, [r4, #8]
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	bfa2      	ittt	ge
 8000dee:	6821      	ldrge	r1, [r4, #0]
 8000df0:	f021 0104 	bicge.w	r1, r1, #4
 8000df4:	6021      	strge	r1, [r4, #0]
 8000df6:	b90d      	cbnz	r5, 8000dfc <_printf_i+0x110>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d04b      	beq.n	8000e94 <_printf_i+0x1a8>
 8000dfc:	4616      	mov	r6, r2
 8000dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e02:	fb03 5711 	mls	r7, r3, r1, r5
 8000e06:	5dc7      	ldrb	r7, [r0, r7]
 8000e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e0c:	462f      	mov	r7, r5
 8000e0e:	42bb      	cmp	r3, r7
 8000e10:	460d      	mov	r5, r1
 8000e12:	d9f4      	bls.n	8000dfe <_printf_i+0x112>
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d10b      	bne.n	8000e30 <_printf_i+0x144>
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	07df      	lsls	r7, r3, #31
 8000e1c:	d508      	bpl.n	8000e30 <_printf_i+0x144>
 8000e1e:	6923      	ldr	r3, [r4, #16]
 8000e20:	6861      	ldr	r1, [r4, #4]
 8000e22:	4299      	cmp	r1, r3
 8000e24:	bfde      	ittt	le
 8000e26:	2330      	movle	r3, #48	@ 0x30
 8000e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e30:	1b92      	subs	r2, r2, r6
 8000e32:	6122      	str	r2, [r4, #16]
 8000e34:	f8cd a000 	str.w	sl, [sp]
 8000e38:	464b      	mov	r3, r9
 8000e3a:	aa03      	add	r2, sp, #12
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4640      	mov	r0, r8
 8000e40:	f7ff fee6 	bl	8000c10 <_printf_common>
 8000e44:	3001      	adds	r0, #1
 8000e46:	d14a      	bne.n	8000ede <_printf_i+0x1f2>
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e4c:	b004      	add	sp, #16
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	4833      	ldr	r0, [pc, #204]	@ (8000f28 <_printf_i+0x23c>)
 8000e5c:	2778      	movs	r7, #120	@ 0x78
 8000e5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	6831      	ldr	r1, [r6, #0]
 8000e66:	061f      	lsls	r7, r3, #24
 8000e68:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e6c:	d402      	bmi.n	8000e74 <_printf_i+0x188>
 8000e6e:	065f      	lsls	r7, r3, #25
 8000e70:	bf48      	it	mi
 8000e72:	b2ad      	uxthmi	r5, r5
 8000e74:	6031      	str	r1, [r6, #0]
 8000e76:	07d9      	lsls	r1, r3, #31
 8000e78:	bf44      	itt	mi
 8000e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8000e7e:	6023      	strmi	r3, [r4, #0]
 8000e80:	b11d      	cbz	r5, 8000e8a <_printf_i+0x19e>
 8000e82:	2310      	movs	r3, #16
 8000e84:	e7ac      	b.n	8000de0 <_printf_i+0xf4>
 8000e86:	4827      	ldr	r0, [pc, #156]	@ (8000f24 <_printf_i+0x238>)
 8000e88:	e7e9      	b.n	8000e5e <_printf_i+0x172>
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f023 0320 	bic.w	r3, r3, #32
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	e7f6      	b.n	8000e82 <_printf_i+0x196>
 8000e94:	4616      	mov	r6, r2
 8000e96:	e7bd      	b.n	8000e14 <_printf_i+0x128>
 8000e98:	6833      	ldr	r3, [r6, #0]
 8000e9a:	6825      	ldr	r5, [r4, #0]
 8000e9c:	6961      	ldr	r1, [r4, #20]
 8000e9e:	1d18      	adds	r0, r3, #4
 8000ea0:	6030      	str	r0, [r6, #0]
 8000ea2:	062e      	lsls	r6, r5, #24
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	d501      	bpl.n	8000eac <_printf_i+0x1c0>
 8000ea8:	6019      	str	r1, [r3, #0]
 8000eaa:	e002      	b.n	8000eb2 <_printf_i+0x1c6>
 8000eac:	0668      	lsls	r0, r5, #25
 8000eae:	d5fb      	bpl.n	8000ea8 <_printf_i+0x1bc>
 8000eb0:	8019      	strh	r1, [r3, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	6123      	str	r3, [r4, #16]
 8000eb6:	4616      	mov	r6, r2
 8000eb8:	e7bc      	b.n	8000e34 <_printf_i+0x148>
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	1d1a      	adds	r2, r3, #4
 8000ebe:	6032      	str	r2, [r6, #0]
 8000ec0:	681e      	ldr	r6, [r3, #0]
 8000ec2:	6862      	ldr	r2, [r4, #4]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff f982 	bl	80001d0 <memchr>
 8000ecc:	b108      	cbz	r0, 8000ed2 <_printf_i+0x1e6>
 8000ece:	1b80      	subs	r0, r0, r6
 8000ed0:	6060      	str	r0, [r4, #4]
 8000ed2:	6863      	ldr	r3, [r4, #4]
 8000ed4:	6123      	str	r3, [r4, #16]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000edc:	e7aa      	b.n	8000e34 <_printf_i+0x148>
 8000ede:	6923      	ldr	r3, [r4, #16]
 8000ee0:	4632      	mov	r2, r6
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	47d0      	blx	sl
 8000ee8:	3001      	adds	r0, #1
 8000eea:	d0ad      	beq.n	8000e48 <_printf_i+0x15c>
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	079b      	lsls	r3, r3, #30
 8000ef0:	d413      	bmi.n	8000f1a <_printf_i+0x22e>
 8000ef2:	68e0      	ldr	r0, [r4, #12]
 8000ef4:	9b03      	ldr	r3, [sp, #12]
 8000ef6:	4298      	cmp	r0, r3
 8000ef8:	bfb8      	it	lt
 8000efa:	4618      	movlt	r0, r3
 8000efc:	e7a6      	b.n	8000e4c <_printf_i+0x160>
 8000efe:	2301      	movs	r3, #1
 8000f00:	4632      	mov	r2, r6
 8000f02:	4649      	mov	r1, r9
 8000f04:	4640      	mov	r0, r8
 8000f06:	47d0      	blx	sl
 8000f08:	3001      	adds	r0, #1
 8000f0a:	d09d      	beq.n	8000e48 <_printf_i+0x15c>
 8000f0c:	3501      	adds	r5, #1
 8000f0e:	68e3      	ldr	r3, [r4, #12]
 8000f10:	9903      	ldr	r1, [sp, #12]
 8000f12:	1a5b      	subs	r3, r3, r1
 8000f14:	42ab      	cmp	r3, r5
 8000f16:	dcf2      	bgt.n	8000efe <_printf_i+0x212>
 8000f18:	e7eb      	b.n	8000ef2 <_printf_i+0x206>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	f104 0619 	add.w	r6, r4, #25
 8000f20:	e7f5      	b.n	8000f0e <_printf_i+0x222>
 8000f22:	bf00      	nop
 8000f24:	08001035 	.word	0x08001035
 8000f28:	08001046 	.word	0x08001046

08000f2c <memmove>:
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	b510      	push	{r4, lr}
 8000f30:	eb01 0402 	add.w	r4, r1, r2
 8000f34:	d902      	bls.n	8000f3c <memmove+0x10>
 8000f36:	4284      	cmp	r4, r0
 8000f38:	4623      	mov	r3, r4
 8000f3a:	d807      	bhi.n	8000f4c <memmove+0x20>
 8000f3c:	1e43      	subs	r3, r0, #1
 8000f3e:	42a1      	cmp	r1, r4
 8000f40:	d008      	beq.n	8000f54 <memmove+0x28>
 8000f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f4a:	e7f8      	b.n	8000f3e <memmove+0x12>
 8000f4c:	4402      	add	r2, r0
 8000f4e:	4601      	mov	r1, r0
 8000f50:	428a      	cmp	r2, r1
 8000f52:	d100      	bne.n	8000f56 <memmove+0x2a>
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f5e:	e7f7      	b.n	8000f50 <memmove+0x24>

08000f60 <_sbrk_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4d06      	ldr	r5, [pc, #24]	@ (8000f7c <_sbrk_r+0x1c>)
 8000f64:	2300      	movs	r3, #0
 8000f66:	4604      	mov	r4, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	602b      	str	r3, [r5, #0]
 8000f6c:	f7ff fa42 	bl	80003f4 <_sbrk>
 8000f70:	1c43      	adds	r3, r0, #1
 8000f72:	d102      	bne.n	8000f7a <_sbrk_r+0x1a>
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	b103      	cbz	r3, 8000f7a <_sbrk_r+0x1a>
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	bd38      	pop	{r3, r4, r5, pc}
 8000f7c:	200001ac 	.word	0x200001ac

08000f80 <memcpy>:
 8000f80:	440a      	add	r2, r1
 8000f82:	4291      	cmp	r1, r2
 8000f84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000f88:	d100      	bne.n	8000f8c <memcpy+0xc>
 8000f8a:	4770      	bx	lr
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f96:	4291      	cmp	r1, r2
 8000f98:	d1f9      	bne.n	8000f8e <memcpy+0xe>
 8000f9a:	bd10      	pop	{r4, pc}

08000f9c <_realloc_r>:
 8000f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa0:	4680      	mov	r8, r0
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	b921      	cbnz	r1, 8000fb2 <_realloc_r+0x16>
 8000fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	4611      	mov	r1, r2
 8000fae:	f7ff bc4b 	b.w	8000848 <_malloc_r>
 8000fb2:	b92a      	cbnz	r2, 8000fc0 <_realloc_r+0x24>
 8000fb4:	f7ff fbdc 	bl	8000770 <_free_r>
 8000fb8:	2400      	movs	r4, #0
 8000fba:	4620      	mov	r0, r4
 8000fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc0:	f000 f81a 	bl	8000ff8 <_malloc_usable_size_r>
 8000fc4:	4285      	cmp	r5, r0
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	d802      	bhi.n	8000fd0 <_realloc_r+0x34>
 8000fca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000fce:	d8f4      	bhi.n	8000fba <_realloc_r+0x1e>
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	4640      	mov	r0, r8
 8000fd4:	f7ff fc38 	bl	8000848 <_malloc_r>
 8000fd8:	4607      	mov	r7, r0
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d0ec      	beq.n	8000fb8 <_realloc_r+0x1c>
 8000fde:	42b5      	cmp	r5, r6
 8000fe0:	462a      	mov	r2, r5
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	bf28      	it	cs
 8000fe6:	4632      	movcs	r2, r6
 8000fe8:	f7ff ffca 	bl	8000f80 <memcpy>
 8000fec:	4621      	mov	r1, r4
 8000fee:	4640      	mov	r0, r8
 8000ff0:	f7ff fbbe 	bl	8000770 <_free_r>
 8000ff4:	463c      	mov	r4, r7
 8000ff6:	e7e0      	b.n	8000fba <_realloc_r+0x1e>

08000ff8 <_malloc_usable_size_r>:
 8000ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ffc:	1f18      	subs	r0, r3, #4
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfbc      	itt	lt
 8001002:	580b      	ldrlt	r3, [r1, r0]
 8001004:	18c0      	addlt	r0, r0, r3
 8001006:	4770      	bx	lr

08001008 <_init>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr

08001014 <_fini>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr
